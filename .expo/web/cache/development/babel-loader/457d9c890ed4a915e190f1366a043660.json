{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onPress\", \"onLongPress\", \"onLayout\", \"navigationState\", \"route\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useLatestCallback from 'use-latest-callback';\nimport PlatformPressable from \"./PlatformPressable\";\nvar DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nvar DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\n\nvar getActiveOpacity = function getActiveOpacity(position, routesLength, tabIndex) {\n  if (routesLength > 1) {\n    var inputRange = Array.from({\n      length: routesLength\n    }, function (_, i) {\n      return i;\n    });\n    return position.interpolate({\n      inputRange: inputRange,\n      outputRange: inputRange.map(function (i) {\n        return i === tabIndex ? 1 : 0;\n      })\n    });\n  } else {\n    return 1;\n  }\n};\n\nvar getInactiveOpacity = function getInactiveOpacity(position, routesLength, tabIndex) {\n  if (routesLength > 1) {\n    var inputRange = Array.from({\n      length: routesLength\n    }, function (_, i) {\n      return i;\n    });\n    return position.interpolate({\n      inputRange: inputRange,\n      outputRange: inputRange.map(function (i) {\n        return i === tabIndex ? 0 : 1;\n      })\n    });\n  } else {\n    return 0;\n  }\n};\n\nvar TabBarItemInternal = function TabBarItemInternal(_ref) {\n  var getAccessibilityLabel = _ref.getAccessibilityLabel,\n      getAccessible = _ref.getAccessible,\n      getLabelText = _ref.getLabelText,\n      getTestID = _ref.getTestID,\n      onLongPress = _ref.onLongPress,\n      onPress = _ref.onPress,\n      isFocused = _ref.isFocused,\n      position = _ref.position,\n      route = _ref.route,\n      style = _ref.style,\n      inactiveColorCustom = _ref.inactiveColor,\n      activeColorCustom = _ref.activeColor,\n      labelStyle = _ref.labelStyle,\n      onLayout = _ref.onLayout,\n      tabIndex = _ref.index,\n      pressColor = _ref.pressColor,\n      pressOpacity = _ref.pressOpacity,\n      renderBadge = _ref.renderBadge,\n      renderIcon = _ref.renderIcon,\n      defaultTabWidth = _ref.defaultTabWidth,\n      routesLength = _ref.routesLength,\n      renderLabelCustom = _ref.renderLabel;\n  var labelColorFromStyle = StyleSheet.flatten(labelStyle || {}).color;\n  var activeColor = activeColorCustom !== undefined ? activeColorCustom : typeof labelColorFromStyle === 'string' ? labelColorFromStyle : DEFAULT_ACTIVE_COLOR;\n  var inactiveColor = inactiveColorCustom !== undefined ? inactiveColorCustom : typeof labelColorFromStyle === 'string' ? labelColorFromStyle : DEFAULT_INACTIVE_COLOR;\n  var activeOpacity = getActiveOpacity(position, routesLength, tabIndex);\n  var inactiveOpacity = getInactiveOpacity(position, routesLength, tabIndex);\n  var icon = null;\n  var label = null;\n\n  if (renderIcon) {\n    var activeIcon = renderIcon({\n      route: route,\n      focused: true,\n      color: activeColor\n    });\n    var inactiveIcon = renderIcon({\n      route: route,\n      focused: false,\n      color: inactiveColor\n    });\n\n    if (inactiveIcon != null && activeIcon != null) {\n      icon = React.createElement(View, {\n        style: styles.icon\n      }, React.createElement(Animated.View, {\n        style: {\n          opacity: inactiveOpacity\n        }\n      }, inactiveIcon), React.createElement(Animated.View, {\n        style: [StyleSheet.absoluteFill, {\n          opacity: activeOpacity\n        }]\n      }, activeIcon));\n    }\n  }\n\n  var renderLabel = renderLabelCustom !== undefined ? renderLabelCustom : function (labelProps) {\n    var labelText = getLabelText({\n      route: labelProps.route\n    });\n\n    if (typeof labelText === 'string') {\n      return React.createElement(Animated.Text, {\n        style: [styles.label, icon ? {\n          marginTop: 0\n        } : null, labelStyle, {\n          color: labelProps.color\n        }]\n      }, labelText);\n    }\n\n    return labelText;\n  };\n\n  if (renderLabel) {\n    var activeLabel = renderLabel({\n      route: route,\n      focused: true,\n      color: activeColor\n    });\n    var inactiveLabel = renderLabel({\n      route: route,\n      focused: false,\n      color: inactiveColor\n    });\n    label = React.createElement(View, null, React.createElement(Animated.View, {\n      style: {\n        opacity: inactiveOpacity\n      }\n    }, inactiveLabel), React.createElement(Animated.View, {\n      style: [StyleSheet.absoluteFill, {\n        opacity: activeOpacity\n      }]\n    }, activeLabel));\n  }\n\n  var tabStyle = StyleSheet.flatten(style);\n  var isWidthSet = (tabStyle === null || tabStyle === void 0 ? void 0 : tabStyle.width) !== undefined;\n  var tabContainerStyle = isWidthSet ? null : {\n    width: defaultTabWidth\n  };\n  var scene = {\n    route: route\n  };\n  var accessibilityLabel = getAccessibilityLabel(scene);\n  accessibilityLabel = typeof accessibilityLabel !== 'undefined' ? accessibilityLabel : getLabelText(scene);\n  var badge = renderBadge ? renderBadge(scene) : null;\n  return React.createElement(PlatformPressable, {\n    android_ripple: {\n      borderless: true\n    },\n    testID: getTestID(scene),\n    accessible: getAccessible(scene),\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"tab\",\n    accessibilityState: {\n      selected: isFocused\n    },\n    accessibilityStates: isFocused ? ['selected'] : [],\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    delayPressIn: 0,\n    onLayout: onLayout,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    style: [styles.pressable, tabContainerStyle]\n  }, React.createElement(View, {\n    pointerEvents: \"none\",\n    style: [styles.item, tabStyle]\n  }, icon, label, badge != null ? React.createElement(View, {\n    style: styles.badge\n  }, badge) : null));\n};\n\nvar MemoizedTabBarItemInternal = React.memo(TabBarItemInternal);\n\nfunction TabBarItem(props) {\n  var onPress = props.onPress,\n      onLongPress = props.onLongPress,\n      onLayout = props.onLayout,\n      navigationState = props.navigationState,\n      route = props.route,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var onPressLatest = useLatestCallback(onPress);\n  var onLongPressLatest = useLatestCallback(onLongPress);\n  var onLayoutLatest = useLatestCallback(onLayout ? onLayout : function () {});\n  var tabIndex = navigationState.routes.indexOf(route);\n  return React.createElement(MemoizedTabBarItemInternal, _extends({}, rest, {\n    onPress: onPressLatest,\n    onLayout: onLayoutLatest,\n    onLongPress: onLongPressLatest,\n    isFocused: navigationState.index === tabIndex,\n    route: route,\n    index: tabIndex,\n    routesLength: navigationState.routes.length\n  }));\n}\n\nexport default TabBarItem;\nvar styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent',\n    textTransform: 'uppercase'\n  },\n  icon: {\n    margin: 2\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0\n  },\n  pressable: {\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["TabBarItem.tsx"],"names":["DEFAULT_ACTIVE_COLOR","DEFAULT_INACTIVE_COLOR","getActiveOpacity","routesLength","inputRange","length","outputRange","i","getInactiveOpacity","TabBarItemInternal","inactiveColor","activeColor","index","renderLabel","renderLabelCustom","labelColorFromStyle","StyleSheet","labelStyle","activeColorCustom","inactiveColorCustom","activeOpacity","inactiveOpacity","icon","label","activeIcon","renderIcon","route","focused","color","inactiveIcon","styles","opacity","labelProps","labelText","getLabelText","marginTop","activeLabel","inactiveLabel","tabStyle","isWidthSet","tabContainerStyle","width","defaultTabWidth","scene","accessibilityLabel","getAccessibilityLabel","badge","renderBadge","borderless","getTestID","getAccessible","selected","isFocused","MemoizedTabBarItemInternal","React","rest","onPressLatest","useLatestCallback","onLongPressLatest","onLayoutLatest","onLayout","tabIndex","navigationState","margin","backgroundColor","textTransform","item","flex","alignItems","justifyContent","padding","minHeight","position","top","right","pressable"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAUA,OAAA,iBAAA,MAAA,qBAAA;AACA,OAAA,iBAAA;AAkCA,IAAMA,oBAAoB,GAA1B,wBAAA;AACA,IAAMC,sBAAsB,GAA5B,0BAAA;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,QAAA,EAAA,YAAA,EAAA,QAAA,EAIpB;EACH,IAAIC,YAAY,GAAhB,CAAA,EAAsB;IACpB,IAAMC,UAAU,GAAG,KAAK,CAAL,IAAA,CAAW;MAAEC,MAAM,EAAEF;IAAV,CAAX,EAAqC,UAAA,CAAA,EAAA,CAAA;MAAA,OAAxD,CAAwD;IAAA,CAArC,CAAnB;IAEA,OAAO,QAAQ,CAAR,WAAA,CAAqB;MAC1BC,UAD0B,EAC1BA,UAD0B;MAE1BE,WAAW,EAAEF,UAAU,CAAVA,GAAAA,CAAgBG,UAAAA,CAAD;QAAA,OAAQA,CAAC,KAADA,QAAAA,GAAAA,CAAAA,GAAvBH,CAAe;MAAA,CAAfA;IAFa,CAArB,CAAP;EAHF,CAAA,MAOO;IACL,OAAA,CAAA;EACD;AAdH,CAAA;;AAiBA,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,QAAA,EAAA,YAAA,EAAA,QAAA,EAItB;EACH,IAAIL,YAAY,GAAhB,CAAA,EAAsB;IACpB,IAAMC,UAAU,GAAG,KAAK,CAAL,IAAA,CAAW;MAAEC,MAAM,EAAEF;IAAV,CAAX,EAAqC,UAAA,CAAA,EAAA,CAAA;MAAA,OAAxD,CAAwD;IAAA,CAArC,CAAnB;IAEA,OAAO,QAAQ,CAAR,WAAA,CAAqB;MAC1BC,UAD0B,EAC1BA,UAD0B;MAE1BE,WAAW,EAAEF,UAAU,CAAVA,GAAAA,CAAgBG,UAAAA,CAAD;QAAA,OAAgBA,CAAC,KAADA,QAAAA,GAAAA,CAAAA,GAA/BH,CAAe;MAAA,CAAfA;IAFa,CAArB,CAAP;EAHF,CAAA,MAOO;IACL,OAAA,CAAA;EACD;AAdH,CAAA;;AA0BA,IAAMK,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,IAAA,EAuBO;EAvBW,IAAA,qBAAA,GAuBX,IAvBW,CAAA,qBAAA;EAAA,IAAA,aAAA,GAuBX,IAvBW,CAAA,aAAA;EAAA,IAAA,YAAA,GAuBX,IAvBW,CAAA,YAAA;EAAA,IAAA,SAAA,GAuBX,IAvBW,CAAA,SAAA;EAAA,IAAA,WAAA,GAuBX,IAvBW,CAAA,WAAA;EAAA,IAAA,OAAA,GAuBX,IAvBW,CAAA,OAAA;EAAA,IAAA,SAAA,GAuBX,IAvBW,CAAA,SAAA;EAAA,IAAA,QAAA,GAuBX,IAvBW,CAAA,QAAA;EAAA,IAAA,KAAA,GAuBX,IAvBW,CAAA,KAAA;EAAA,IAAA,KAAA,GAuBX,IAvBW,CAAA,KAAA;EAAA,IAAA,mBAAA,GAuBX,IAvBW,CAW3CC,aAX2C;EAAA,IAAA,iBAAA,GAuBX,IAvBW,CAY3CC,WAZ2C;EAAA,IAAA,UAAA,GAuBX,IAvBW,CAAA,UAAA;EAAA,IAAA,QAAA,GAuBX,IAvBW,CAAA,QAAA;EAAA,IAAA,QAAA,GAuBX,IAvBW,CAe3CC,KAf2C;EAAA,IAAA,UAAA,GAuBX,IAvBW,CAAA,UAAA;EAAA,IAAA,YAAA,GAuBX,IAvBW,CAAA,YAAA;EAAA,IAAA,WAAA,GAuBX,IAvBW,CAAA,WAAA;EAAA,IAAA,UAAA,GAuBX,IAvBW,CAAA,UAAA;EAAA,IAAA,eAAA,GAuBX,IAvBW,CAAA,eAAA;EAAA,IAAA,YAAA,GAuBX,IAvBW,CAAA,YAAA;EAAA,IAsB9BE,iBAtB8B,GAuBX,IAvBW,CAsB3CD,WAtB2C;EAwB3C,IAAME,mBAAmB,GAAGC,UAAU,CAAVA,OAAAA,CAAmBC,UAAU,IAA7BD,EAAAA,EAA5B,KAAA;EAEA,IAAML,WAAW,GACfO,iBAAiB,KAAjBA,SAAAA,GAAAA,iBAAAA,GAEI,OAAA,mBAAA,KAAA,QAAA,GAAA,mBAAA,GAHN,oBAAA;EAMA,IAAMR,aAAa,GACjBS,mBAAmB,KAAnBA,SAAAA,GAAAA,mBAAAA,GAEI,OAAA,mBAAA,KAAA,QAAA,GAAA,mBAAA,GAHN,sBAAA;EAOA,IAAMC,aAAa,GAAGlB,gBAAgB,CAAA,QAAA,EAAA,YAAA,EAAtC,QAAsC,CAAtC;EACA,IAAMmB,eAAe,GAAGb,kBAAkB,CAAA,QAAA,EAAA,YAAA,EAA1C,QAA0C,CAA1C;EAEA,IAAIc,IAA4B,GAAhC,IAAA;EACA,IAAIC,KAA6B,GAAjC,IAAA;;EAEA,IAAA,UAAA,EAAgB;IACd,IAAMC,UAAU,GAAGC,UAAU,CAAC;MAC5BC,KAD4B,EAC5BA,KAD4B;MAE5BC,OAAO,EAFqB,IAAA;MAG5BC,KAAK,EAAEjB;IAHqB,CAAD,CAA7B;IAKA,IAAMkB,YAAY,GAAGJ,UAAU,CAAC;MAC9BC,KAD8B,EAC9BA,KAD8B;MAE9BC,OAAO,EAFuB,KAAA;MAG9BC,KAAK,EAAElB;IAHuB,CAAD,CAA/B;;IAMA,IAAImB,YAAY,IAAZA,IAAAA,IAAwBL,UAAU,IAAtC,IAAA,EAAgD;MAC9CF,IAAI,GACF,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;QAAM,KAAK,EAAEQ,MAAM,CAACR;MAApB,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;QAAe,KAAK,EAAE;UAAES,OAAO,EAAEV;QAAX;MAAtB,CAAA,EADF,YACE,CADF,EAIE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;QACE,KAAK,EAAE,CAACL,UAAU,CAAX,YAAA,EAA0B;UAAEe,OAAO,EAAEX;QAAX,CAA1B;MADT,CAAA,EALJE,UAKI,CAJF,CADFA;IAYD;EACF;;EAED,IAAMT,WAAW,GACfC,iBAAiB,KAAjBA,SAAAA,GAAAA,iBAAAA,GAEKkB,UAAAA,UAAD,EAA6C;IAC3C,IAAMC,SAAS,GAAGC,YAAY,CAAC;MAAER,KAAK,EAAEM,UAAU,CAACN;IAApB,CAAD,CAA9B;;IAEA,IAAI,OAAA,SAAA,KAAJ,QAAA,EAAmC;MACjC,OACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;QACE,KAAK,EAAE,CACLI,MAAM,CADD,KAAA,EAELR,IAAI,GAAG;UAAEa,SAAS,EAAE;QAAb,CAAH,GAFC,IAAA,EAAA,UAAA,EAIL;UAAEP,KAAK,EAAEI,UAAU,CAACJ;QAApB,CAJK;MADT,CAAA,EADF,SACE,CADF;IAYD;;IAED,OAAA,SAAA;EArBR,CAAA;;EAwBA,IAAA,WAAA,EAAiB;IACf,IAAMQ,WAAW,GAAGvB,WAAW,CAAC;MAC9Ba,KAD8B,EAC9BA,KAD8B;MAE9BC,OAAO,EAFuB,IAAA;MAG9BC,KAAK,EAAEjB;IAHuB,CAAD,CAA/B;IAKA,IAAM0B,aAAa,GAAGxB,WAAW,CAAC;MAChCa,KADgC,EAChCA,KADgC;MAEhCC,OAAO,EAFyB,KAAA;MAGhCC,KAAK,EAAElB;IAHyB,CAAD,CAAjC;IAMAa,KAAK,GACH,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;MAAe,KAAK,EAAE;QAAEQ,OAAO,EAAEV;MAAX;IAAtB,CAAA,EADF,aACE,CADF,EAIE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;MACE,KAAK,EAAE,CAACL,UAAU,CAAX,YAAA,EAA0B;QAAEe,OAAO,EAAEX;MAAX,CAA1B;IADT,CAAA,EALJG,WAKI,CAJF,CADFA;EAYD;;EAED,IAAMe,QAAQ,GAAGtB,UAAU,CAAVA,OAAAA,CAAjB,KAAiBA,CAAjB;EACA,IAAMuB,UAAU,GAAG,CAAA,QAAQ,KAAR,IAAA,IAAA,QAAQ,KAAA,KAAR,CAAA,GAAA,KAAA,CAAA,GAAA,QAAQ,CAAR,KAAA,MAAnB,SAAA;EAEA,IAAMC,iBAAmC,GAAGD,UAAU,GAAA,IAAA,GAElD;IAAEE,KAAK,EAAEC;EAAT,CAFJ;EAIA,IAAMC,KAAK,GAAG;IAAEjB,KAAAA,EAAAA;EAAF,CAAd;EAEA,IAAIkB,kBAAkB,GAAGC,qBAAqB,CAA9C,KAA8C,CAA9C;EAEAD,kBAAkB,GAChB,OAAA,kBAAA,KAAA,WAAA,GAAA,kBAAA,GAEIV,YAAY,CAHlBU,KAGkB,CAHlBA;EAKA,IAAME,KAAK,GAAGC,WAAW,GAAGA,WAAW,CAAd,KAAc,CAAd,GAAzB,IAAA;EAEA,OACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;IACE,cAAc,EAAE;MAAEC,UAAU,EAAE;IAAd,CADlB;IAEE,MAAM,EAAEC,SAAS,CAFnB,KAEmB,CAFnB;IAGE,UAAU,EAAEC,aAAa,CAH3B,KAG2B,CAH3B;IAIE,kBAAkB,EAJpB,kBAAA;IAKE,iBAAiB,EALnB,KAAA;IAME,kBAAkB,EAAE;MAAEC,QAAQ,EAAEC;IAAZ,CANtB;IAQE,mBAAmB,EAAEA,SAAS,GAAG,CAAH,UAAG,CAAH,GARhC,EAAA;IASE,UAAU,EATZ,UAAA;IAUE,YAAY,EAVd,YAAA;IAWE,YAAY,EAXd,CAAA;IAYE,QAAQ,EAZV,QAAA;IAaE,OAAO,EAbT,OAAA;IAcE,WAAW,EAdb,WAAA;IAeE,KAAK,EAAE,CAACtB,MAAM,CAAP,SAAA,EAAA,iBAAA;EAfT,CAAA,EAiBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IAAM,aAAa,EAAnB,MAAA;IAA2B,KAAK,EAAE,CAACA,MAAM,CAAP,IAAA,EAAA,QAAA;EAAlC,CAAA,EAAA,IAAA,EAAA,KAAA,EAGG,KAAK,IAAL,IAAA,GAAgB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IAAM,KAAK,EAAEA,MAAM,CAACgB;EAApB,CAAA,EAAhB,KAAgB,CAAhB,GArBP,IAkBI,CAjBF,CADF;AA7IF,CAAA;;AAwKA,IAAMO,0BAA0B,GAAGC,KAAK,CAALA,IAAAA,CAAnC,kBAAmCA,CAAnC;;AAIA,SAAA,UAAA,CAAA,KAAA,EAAsD;EACpD,IAAM,OAAN,GAAA,KAAA,CAAM,OAAN;EAAA,IAAM,WAAN,GAAA,KAAA,CAAM,WAAN;EAAA,IAAM,QAAN,GAAA,KAAA,CAAM,QAAN;EAAA,IAAM,eAAN,GAAA,KAAA,CAAM,eAAN;EAAA,IAAM,KAAN,GAAA,KAAA,CAAM,KAAN;EAAA,IAAmEC,IAAnE,4BAAA,KAAA;;EAEA,IAAMC,aAAa,GAAGC,iBAAiB,CAAvC,OAAuC,CAAvC;EACA,IAAMC,iBAAiB,GAAGD,iBAAiB,CAA3C,WAA2C,CAA3C;EACA,IAAME,cAAc,GAAGF,iBAAiB,CAACG,QAAQ,GAAA,QAAA,GAAc,YAAM,CAArE,CAAwC,CAAxC;EAEA,IAAMC,QAAQ,GAAGC,eAAe,CAAfA,MAAAA,CAAAA,OAAAA,CAAjB,KAAiBA,CAAjB;EAEA,OACE,KAAA,CAAA,aAAA,CAAA,0BAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;IAEE,OAAO,EAFT,aAAA;IAGE,QAAQ,EAHV,cAAA;IAIE,WAAW,EAJb,iBAAA;IAKE,SAAS,EAAEA,eAAe,CAAfA,KAAAA,KALb,QAAA;IAME,KAAK,EANP,KAAA;IAOE,KAAK,EAPP,QAAA;IAQE,YAAY,EAAEA,eAAe,CAAfA,MAAAA,CAAuBzD;EARvC,CAAA,CAAA,CADF;AAYD;;AAED,eAAA,UAAA;AAEA,IAAMyB,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BP,KAAK,EAAE;IACLwC,MAAM,EADD,CAAA;IAELC,eAAe,EAFV,aAAA;IAGLC,aAAa,EAAE;EAHV,CADwB;EAM/B3C,IAAI,EAAE;IACJyC,MAAM,EAAE;EADJ,CANyB;EAS/BG,IAAI,EAAE;IACJC,IAAI,EADA,CAAA;IAEJC,UAAU,EAFN,QAAA;IAGJC,cAAc,EAHV,QAAA;IAIJC,OAAO,EAJH,EAAA;IAKJC,SAAS,EAAE;EALP,CATyB;EAgB/BzB,KAAK,EAAE;IACL0B,QAAQ,EADH,UAAA;IAELC,GAAG,EAFE,CAAA;IAGLC,KAAK,EAAE;EAHF,CAhBwB;EAqB/BC,SAAS,EAAE;IAGTX,eAAe,EAAE;EAHR;AArBoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  StyleProp,\n  LayoutChangeEvent,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport useLatestCallback from 'use-latest-callback';\nimport PlatformPressable from './PlatformPressable';\nimport type { Scene, Route, NavigationState } from './types';\n\nexport type Props<T extends Route> = {\n  position: Animated.AnimatedInterpolation;\n  route: T;\n  navigationState: NavigationState<T>;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderIcon?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  onPress: () => void;\n  onLongPress: () => void;\n  defaultTabWidth?: number;\n  labelStyle?: StyleProp<TextStyle>;\n  style: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nconst DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\n\nconst getActiveOpacity = (\n  position: Animated.AnimatedInterpolation,\n  routesLength: number,\n  tabIndex: number\n) => {\n  if (routesLength > 1) {\n    const inputRange = Array.from({ length: routesLength }, (_, i) => i);\n\n    return position.interpolate({\n      inputRange,\n      outputRange: inputRange.map((i) => (i === tabIndex ? 1 : 0)),\n    });\n  } else {\n    return 1;\n  }\n};\n\nconst getInactiveOpacity = (\n  position: Animated.AnimatedInterpolation,\n  routesLength: number,\n  tabIndex: number\n) => {\n  if (routesLength > 1) {\n    const inputRange = Array.from({ length: routesLength }, (_, i) => i);\n\n    return position.interpolate({\n      inputRange,\n      outputRange: inputRange.map((i: number) => (i === tabIndex ? 0 : 1)),\n    });\n  } else {\n    return 0;\n  }\n};\n\ntype TabBarItemInternalProps<T extends Route> = Omit<\n  Props<T>,\n  'navigationState'\n> & {\n  isFocused: boolean;\n  index: number;\n  routesLength: number;\n};\n\nconst TabBarItemInternal = <T extends Route>({\n  getAccessibilityLabel,\n  getAccessible,\n  getLabelText,\n  getTestID,\n  onLongPress,\n  onPress,\n  isFocused,\n  position,\n  route,\n  style,\n  inactiveColor: inactiveColorCustom,\n  activeColor: activeColorCustom,\n  labelStyle,\n  onLayout,\n  index: tabIndex,\n  pressColor,\n  pressOpacity,\n  renderBadge,\n  renderIcon,\n  defaultTabWidth,\n  routesLength,\n  renderLabel: renderLabelCustom,\n}: TabBarItemInternalProps<T>) => {\n  const labelColorFromStyle = StyleSheet.flatten(labelStyle || {}).color;\n\n  const activeColor =\n    activeColorCustom !== undefined\n      ? activeColorCustom\n      : typeof labelColorFromStyle === 'string'\n      ? labelColorFromStyle\n      : DEFAULT_ACTIVE_COLOR;\n  const inactiveColor =\n    inactiveColorCustom !== undefined\n      ? inactiveColorCustom\n      : typeof labelColorFromStyle === 'string'\n      ? labelColorFromStyle\n      : DEFAULT_INACTIVE_COLOR;\n\n  const activeOpacity = getActiveOpacity(position, routesLength, tabIndex);\n  const inactiveOpacity = getInactiveOpacity(position, routesLength, tabIndex);\n\n  let icon: React.ReactNode | null = null;\n  let label: React.ReactNode | null = null;\n\n  if (renderIcon) {\n    const activeIcon = renderIcon({\n      route,\n      focused: true,\n      color: activeColor,\n    });\n    const inactiveIcon = renderIcon({\n      route,\n      focused: false,\n      color: inactiveColor,\n    });\n\n    if (inactiveIcon != null && activeIcon != null) {\n      icon = (\n        <View style={styles.icon}>\n          <Animated.View style={{ opacity: inactiveOpacity }}>\n            {inactiveIcon}\n          </Animated.View>\n          <Animated.View\n            style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n          >\n            {activeIcon}\n          </Animated.View>\n        </View>\n      );\n    }\n  }\n\n  const renderLabel =\n    renderLabelCustom !== undefined\n      ? renderLabelCustom\n      : (labelProps: { route: T; color: string }) => {\n          const labelText = getLabelText({ route: labelProps.route });\n\n          if (typeof labelText === 'string') {\n            return (\n              <Animated.Text\n                style={[\n                  styles.label,\n                  icon ? { marginTop: 0 } : null,\n                  labelStyle,\n                  { color: labelProps.color },\n                ]}\n              >\n                {labelText}\n              </Animated.Text>\n            );\n          }\n\n          return labelText;\n        };\n\n  if (renderLabel) {\n    const activeLabel = renderLabel({\n      route,\n      focused: true,\n      color: activeColor,\n    });\n    const inactiveLabel = renderLabel({\n      route,\n      focused: false,\n      color: inactiveColor,\n    });\n\n    label = (\n      <View>\n        <Animated.View style={{ opacity: inactiveOpacity }}>\n          {inactiveLabel}\n        </Animated.View>\n        <Animated.View\n          style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n        >\n          {activeLabel}\n        </Animated.View>\n      </View>\n    );\n  }\n\n  const tabStyle = StyleSheet.flatten(style);\n  const isWidthSet = tabStyle?.width !== undefined;\n\n  const tabContainerStyle: ViewStyle | null = isWidthSet\n    ? null\n    : { width: defaultTabWidth };\n\n  const scene = { route };\n\n  let accessibilityLabel = getAccessibilityLabel(scene);\n\n  accessibilityLabel =\n    typeof accessibilityLabel !== 'undefined'\n      ? accessibilityLabel\n      : getLabelText(scene);\n\n  const badge = renderBadge ? renderBadge(scene) : null;\n\n  return (\n    <PlatformPressable\n      android_ripple={{ borderless: true }}\n      testID={getTestID(scene)}\n      accessible={getAccessible(scene)}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"tab\"\n      accessibilityState={{ selected: isFocused }}\n      // @ts-ignore: this is to support older React Native versions\n      accessibilityStates={isFocused ? ['selected'] : []}\n      pressColor={pressColor}\n      pressOpacity={pressOpacity}\n      delayPressIn={0}\n      onLayout={onLayout}\n      onPress={onPress}\n      onLongPress={onLongPress}\n      style={[styles.pressable, tabContainerStyle]}\n    >\n      <View pointerEvents=\"none\" style={[styles.item, tabStyle]}>\n        {icon}\n        {label}\n        {badge != null ? <View style={styles.badge}>{badge}</View> : null}\n      </View>\n    </PlatformPressable>\n  );\n};\n\nconst MemoizedTabBarItemInternal = React.memo(\n  TabBarItemInternal\n) as typeof TabBarItemInternal;\n\nfunction TabBarItem<T extends Route>(props: Props<T>) {\n  const { onPress, onLongPress, onLayout, navigationState, route, ...rest } =\n    props;\n  const onPressLatest = useLatestCallback(onPress);\n  const onLongPressLatest = useLatestCallback(onLongPress);\n  const onLayoutLatest = useLatestCallback(onLayout ? onLayout : () => {});\n\n  const tabIndex = navigationState.routes.indexOf(route);\n\n  return (\n    <MemoizedTabBarItemInternal\n      {...rest}\n      onPress={onPressLatest}\n      onLayout={onLayoutLatest}\n      onLongPress={onLongPressLatest}\n      isFocused={navigationState.index === tabIndex}\n      route={route}\n      index={tabIndex}\n      routesLength={navigationState.routes.length}\n    />\n  );\n}\n\nexport default TabBarItem;\n\nconst styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent',\n    textTransform: 'uppercase',\n  },\n  icon: {\n    margin: 2,\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48,\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n  pressable: {\n    // The label is not pressable on Windows\n    // Adding backgroundColor: 'transparent' seems to fix it\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport invariant from 'fbjs/lib/invariant';\n\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n\n    this._subscriptionsForType = {};\n  }\n\n  _createClass(EventSubscriptionVendor, [{\n    key: \"addSubscription\",\n    value: function addSubscription(eventType, subscription) {\n      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n      if (!this._subscriptionsForType[eventType]) {\n        this._subscriptionsForType[eventType] = [];\n      }\n\n      var key = this._subscriptionsForType[eventType].length;\n\n      this._subscriptionsForType[eventType].push(subscription);\n\n      subscription.eventType = eventType;\n      subscription.key = key;\n      return subscription;\n    }\n  }, {\n    key: \"removeAllSubscriptions\",\n    value: function removeAllSubscriptions(eventType) {\n      if (eventType == null) {\n        this._subscriptionsForType = {};\n      } else {\n        delete this._subscriptionsForType[eventType];\n      }\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      var eventType = subscription.eventType;\n      var key = subscription.key;\n      var subscriptionsForType = this._subscriptionsForType[eventType];\n\n      if (subscriptionsForType) {\n        delete subscriptionsForType[key];\n      }\n    }\n  }, {\n    key: \"getSubscriptionsForType\",\n    value: function getSubscriptionsForType(eventType) {\n      return this._subscriptionsForType[eventType];\n    }\n  }]);\n\n  return EventSubscriptionVendor;\n}();\n\nexport default EventSubscriptionVendor;","map":{"version":3,"names":["invariant","EventSubscriptionVendor","_subscriptionsForType","eventType","subscription","subscriber","key","length","push","subscriptionsForType"],"sources":["C:/Users/ASUS/Desktop/ChuyenDeDiDongV2/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventSubscriptionVendor.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n */\r\n'use strict';\r\n\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\n/**\r\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\r\n * subscribed to a particular event type.\r\n */\r\nclass EventSubscriptionVendor {\r\n  constructor() {\r\n    this._subscriptionsForType = {};\r\n  }\r\n  /**\r\n   * Adds a subscription keyed by an event type.\r\n   *\r\n   * @param {string} eventType\r\n   * @param {EventSubscription} subscription\r\n   */\r\n\r\n\r\n  addSubscription(eventType, subscription) {\r\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\r\n\r\n    if (!this._subscriptionsForType[eventType]) {\r\n      this._subscriptionsForType[eventType] = [];\r\n    }\r\n\r\n    var key = this._subscriptionsForType[eventType].length;\r\n\r\n    this._subscriptionsForType[eventType].push(subscription);\r\n\r\n    subscription.eventType = eventType;\r\n    subscription.key = key;\r\n    return subscription;\r\n  }\r\n  /**\r\n   * Removes a bulk set of the subscriptions.\r\n   *\r\n   * @param {?string} eventType - Optional name of the event type whose\r\n   *   registered supscriptions to remove, if null remove all subscriptions.\r\n   */\r\n\r\n\r\n  removeAllSubscriptions(eventType) {\r\n    if (eventType == null) {\r\n      this._subscriptionsForType = {};\r\n    } else {\r\n      delete this._subscriptionsForType[eventType];\r\n    }\r\n  }\r\n  /**\r\n   * Removes a specific subscription. Instead of calling this function, call\r\n   * `subscription.remove()` directly.\r\n   *\r\n   * @param {object} subscription\r\n   */\r\n\r\n\r\n  removeSubscription(subscription) {\r\n    var eventType = subscription.eventType;\r\n    var key = subscription.key;\r\n    var subscriptionsForType = this._subscriptionsForType[eventType];\r\n\r\n    if (subscriptionsForType) {\r\n      delete subscriptionsForType[key];\r\n    }\r\n  }\r\n  /**\r\n   * Returns the array of subscriptions that are currently registered for the\r\n   * given event type.\r\n   *\r\n   * Note: This array can be potentially sparse as subscriptions are deleted\r\n   * from it when they are removed.\r\n   *\r\n   * TODO: This returns a nullable array. wat?\r\n   *\r\n   * @param {string} eventType\r\n   * @returns {?array}\r\n   */\r\n\r\n\r\n  getSubscriptionsForType(eventType) {\r\n    return this._subscriptionsForType[eventType];\r\n  }\r\n\r\n}\r\n\r\nexport default EventSubscriptionVendor;"],"mappings":"AASA;;;;AAEA,OAAOA,SAAP,MAAsB,oBAAtB;;IAMMC,uB;EACJ,mCAAc;IAAA;;IACZ,KAAKC,qBAAL,GAA6B,EAA7B;EACD;;;;WASD,yBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyC;MACvCJ,SAAS,CAACI,YAAY,CAACC,UAAb,KAA4B,IAA7B,EAAmC,wDAAnC,CAAT;;MAEA,IAAI,CAAC,KAAKH,qBAAL,CAA2BC,SAA3B,CAAL,EAA4C;QAC1C,KAAKD,qBAAL,CAA2BC,SAA3B,IAAwC,EAAxC;MACD;;MAED,IAAIG,GAAG,GAAG,KAAKJ,qBAAL,CAA2BC,SAA3B,EAAsCI,MAAhD;;MAEA,KAAKL,qBAAL,CAA2BC,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C;;MAEAA,YAAY,CAACD,SAAb,GAAyBA,SAAzB;MACAC,YAAY,CAACE,GAAb,GAAmBA,GAAnB;MACA,OAAOF,YAAP;IACD;;;WASD,gCAAuBD,SAAvB,EAAkC;MAChC,IAAIA,SAAS,IAAI,IAAjB,EAAuB;QACrB,KAAKD,qBAAL,GAA6B,EAA7B;MACD,CAFD,MAEO;QACL,OAAO,KAAKA,qBAAL,CAA2BC,SAA3B,CAAP;MACD;IACF;;;WASD,4BAAmBC,YAAnB,EAAiC;MAC/B,IAAID,SAAS,GAAGC,YAAY,CAACD,SAA7B;MACA,IAAIG,GAAG,GAAGF,YAAY,CAACE,GAAvB;MACA,IAAIG,oBAAoB,GAAG,KAAKP,qBAAL,CAA2BC,SAA3B,CAA3B;;MAEA,IAAIM,oBAAJ,EAA0B;QACxB,OAAOA,oBAAoB,CAACH,GAAD,CAA3B;MACD;IACF;;;WAeD,iCAAwBH,SAAxB,EAAmC;MACjC,OAAO,KAAKD,qBAAL,CAA2BC,SAA3B,CAAP;IACD;;;;;;AAIH,eAAeF,uBAAf"},"metadata":{},"sourceType":"module"}
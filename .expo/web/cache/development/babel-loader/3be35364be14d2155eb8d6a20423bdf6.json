{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport default function SceneView(_ref) {\n  var children = _ref.children,\n      navigationState = _ref.navigationState,\n      lazy = _ref.lazy,\n      layout = _ref.layout,\n      index = _ref.index,\n      lazyPreloadDistance = _ref.lazyPreloadDistance,\n      addEnterListener = _ref.addEnterListener,\n      style = _ref.style;\n\n  var _React$useState = React.useState(Math.abs(navigationState.index - index) > lazyPreloadDistance),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setIsLoading = _React$useState2[1];\n\n  if (isLoading && Math.abs(navigationState.index - index) <= lazyPreloadDistance) {\n    setIsLoading(false);\n  }\n\n  React.useEffect(function () {\n    var handleEnter = function handleEnter(value) {\n      if (value === index) {\n        setIsLoading(function (prevState) {\n          if (prevState) {\n            return false;\n          }\n\n          return prevState;\n        });\n      }\n    };\n\n    var unsubscribe;\n    var timer;\n\n    if (lazy && isLoading) {\n      unsubscribe = addEnterListener(handleEnter);\n    } else if (isLoading) {\n      timer = setTimeout(function () {\n        return setIsLoading(false);\n      }, 0);\n    }\n\n    return function () {\n      var _unsubscribe;\n\n      (_unsubscribe = unsubscribe) === null || _unsubscribe === void 0 ? void 0 : _unsubscribe();\n      clearTimeout(timer);\n    };\n  }, [addEnterListener, index, isLoading, lazy]);\n  var focused = navigationState.index === index;\n  return React.createElement(View, {\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    style: [styles.route, layout.width ? {\n      width: layout.width\n    } : focused ? StyleSheet.absoluteFill : null, style]\n  }, focused || layout.width ? children({\n    loading: isLoading\n  }) : null);\n}\nvar styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["SceneView.tsx"],"names":["style","React","Math","navigationState","isLoading","setIsLoading","handleEnter","value","prevState","lazy","unsubscribe","addEnterListener","timer","setTimeout","clearTimeout","focused","styles","layout","width","StyleSheet","children","loading","route","flex","overflow"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAmBA,eAAe,SAAA,SAAA,CAAA,IAAA,EASF;EATsC,IAAA,QAAA,GAStC,IATsC,CAAA,QAAA;EAAA,IAAA,eAAA,GAStC,IATsC,CAAA,eAAA;EAAA,IAAA,IAAA,GAStC,IATsC,CAAA,IAAA;EAAA,IAAA,MAAA,GAStC,IATsC,CAAA,MAAA;EAAA,IAAA,KAAA,GAStC,IATsC,CAAA,KAAA;EAAA,IAAA,mBAAA,GAStC,IATsC,CAAA,mBAAA;EAAA,IAAA,gBAAA,GAStC,IATsC,CAAA,gBAAA;EAAA,IAQjDA,KARiD,GAStC,IATsC,CAQjDA,KARiD;;EAUjD,sBAAkCC,KAAK,CAALA,QAAAA,CAChCC,IAAI,CAAJA,GAAAA,CAASC,eAAe,CAAfA,KAAAA,GAATD,KAAAA,IADF,mBAAkCD,CAAlC;EAAA;EAAA,IAAM,SAAN;EAAA,IAAM,YAAN;;EAIA,IACEG,SAAS,IACTF,IAAI,CAAJA,GAAAA,CAASC,eAAe,CAAfA,KAAAA,GAATD,KAAAA,KAFF,mBAAA,EAGE;IAEAG,YAAY,CAAZA,KAAY,CAAZA;EACD;;EAEDJ,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAMK,WAAW,GAAIC,SAAfD,WAAeC,CAAAA,KAAD,EAAmB;MAErC,IAAIA,KAAK,KAAT,KAAA,EAAqB;QACnBF,YAAY,CAAEG,UAAAA,SAAD,EAAe;UAC1B,IAAA,SAAA,EAAe;YACb,OAAA,KAAA;UACD;;UACD,OAAA,SAAA;QAJFH,CAAY,CAAZA;MAMD;IATH,CAAA;;IAYA,IAAA,WAAA;IACA,IAAA,KAAA;;IAEA,IAAII,IAAI,IAAR,SAAA,EAAuB;MAErBC,WAAW,GAAGC,gBAAgB,CAA9BD,WAA8B,CAA9BA;IAFF,CAAA,MAGO,IAAA,SAAA,EAAe;MAGpBE,KAAK,GAAGC,UAAU,CAAC;QAAA,OAAMR,YAAY,CAAnB,KAAmB,CAAlB;MAAA,CAAD,EAAlBO,CAAkB,CAAlBA;IACD;;IAED,OAAO,YAAM;MAAA,IAAA,YAAA;;MACX,CAAA,YAAA,GAAA,WAAA,MAAA,IAAA,IAAA,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,YAAA,EAAA;MACAE,YAAY,CAAZA,KAAY,CAAZA;IAFF,CAAA;EAzBFb,CAAAA,EA6BG,CAAA,gBAAA,EAAA,KAAA,EAAA,SAAA,EA7BHA,IA6BG,CA7BHA;EA+BA,IAAMc,OAAO,GAAGZ,eAAe,CAAfA,KAAAA,KAAhB,KAAA;EAEA,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IACE,2BAA2B,EAAE,CAD/B,OAAA;IAEE,yBAAyB,EAAEY,OAAO,GAAA,MAAA,GAFpC,qBAAA;IAGE,KAAK,EAAE,CACLC,MAAM,CADD,KAAA,EAILC,MAAM,CAANA,KAAAA,GACI;MAAEC,KAAK,EAAED,MAAM,CAACC;IAAhB,CADJD,GAEIF,OAAO,GACPI,UAAU,CADH,YAAA,GANN,IAAA,EAAA,KAAA;EAHT,CAAA,EAmBIJ,OAAO,IAAIE,MAAM,CAAjBF,KAAAA,GAA0BK,QAAQ,CAAC;IAAEC,OAAO,EAAEjB;EAAX,CAAD,CAAlCW,GApBN,IACE,CADF;AAwBD;AAED,IAAMC,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BM,KAAK,EAAE;IACLC,IAAI,EADC,CAAA;IAELC,QAAQ,EAAE;EAFL;AADwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport type {\n  SceneRendererProps,\n  EventEmitterProps,\n  NavigationState,\n  Route,\n} from './types';\n\ntype Props<T extends Route> = SceneRendererProps &\n  EventEmitterProps & {\n    navigationState: NavigationState<T>;\n    lazy: boolean;\n    lazyPreloadDistance: number;\n    index: number;\n    children: (props: { loading: boolean }) => React.ReactNode;\n    style?: StyleProp<ViewStyle>;\n  };\n\nexport default function SceneView<T extends Route>({\n  children,\n  navigationState,\n  lazy,\n  layout,\n  index,\n  lazyPreloadDistance,\n  addEnterListener,\n  style,\n}: Props<T>) {\n  const [isLoading, setIsLoading] = React.useState(\n    Math.abs(navigationState.index - index) > lazyPreloadDistance\n  );\n\n  if (\n    isLoading &&\n    Math.abs(navigationState.index - index) <= lazyPreloadDistance\n  ) {\n    // Always render the route when it becomes focused\n    setIsLoading(false);\n  }\n\n  React.useEffect(() => {\n    const handleEnter = (value: number) => {\n      // If we're entering the current route, we need to load it\n      if (value === index) {\n        setIsLoading((prevState) => {\n          if (prevState) {\n            return false;\n          }\n          return prevState;\n        });\n      }\n    };\n\n    let unsubscribe: (() => void) | undefined;\n    let timer: NodeJS.Timeout;\n\n    if (lazy && isLoading) {\n      // If lazy mode is enabled, listen to when we enter screens\n      unsubscribe = addEnterListener(handleEnter);\n    } else if (isLoading) {\n      // If lazy mode is not enabled, render the scene with a delay if not loaded already\n      // This improves the initial startup time as the scene is no longer blocking\n      timer = setTimeout(() => setIsLoading(false), 0);\n    }\n\n    return () => {\n      unsubscribe?.();\n      clearTimeout(timer);\n    };\n  }, [addEnterListener, index, isLoading, lazy]);\n\n  const focused = navigationState.index === index;\n\n  return (\n    <View\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      style={[\n        styles.route,\n        // If we don't have the layout yet, make the focused screen fill the container\n        // This avoids delay before we are able to render pages side by side\n        layout.width\n          ? { width: layout.width }\n          : focused\n          ? StyleSheet.absoluteFill\n          : null,\n        style,\n      ]}\n    >\n      {\n        // Only render the route only if it's either focused or layout is available\n        // When layout is not available, we must not render unfocused routes\n        // so that the focused route can fill the screen\n        focused || layout.width ? children({ loading: isLoading }) : null\n      }\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as React from 'react';\nimport createElement from \"../createElement\";\nimport * as forwardedProps from \"../../modules/forwardedProps\";\nimport pick from \"../../modules/pick\";\nimport useElementLayout from \"../../modules/useElementLayout\";\nimport useLayoutEffect from \"../../modules/useLayoutEffect\";\nimport useMergeRefs from \"../../modules/useMergeRefs\";\nimport usePlatformMethods from \"../../modules/usePlatformMethods\";\nimport useResponderEvents from \"../../modules/useResponderEvents\";\nimport { getLocaleDirection, useLocaleContext } from \"../../modules/useLocale\";\nimport StyleSheet from \"../StyleSheet\";\nimport TextInputState from \"../../modules/TextInputState\";\n\nvar isSelectionStale = function isSelectionStale(node, selection) {\n  var selectionEnd = node.selectionEnd,\n      selectionStart = node.selectionStart;\n  var start = selection.start,\n      end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n\nvar setSelection = function setSelection(node, selection) {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n        end = selection.end;\n\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\n\nvar forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\n\nvar pickProps = function pickProps(props) {\n  return pick(props, forwardPropsList);\n};\n\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\n\nvar focusTimeout = null;\nvar TextInput = React.forwardRef(function (props, forwardedRef) {\n  var _props$autoCapitalize = props.autoCapitalize,\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n      autoComplete = props.autoComplete,\n      autoCompleteType = props.autoCompleteType,\n      _props$autoCorrect = props.autoCorrect,\n      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n      blurOnSubmit = props.blurOnSubmit,\n      clearTextOnFocus = props.clearTextOnFocus,\n      dir = props.dir,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$keyboardType = props.keyboardType,\n      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$numberOfLines = props.numberOfLines,\n      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onChangeText = props.onChangeText,\n      onContentSizeChange = props.onContentSizeChange,\n      onFocus = props.onFocus,\n      onKeyPress = props.onKeyPress,\n      onLayout = props.onLayout,\n      onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n      onResponderEnd = props.onResponderEnd,\n      onResponderGrant = props.onResponderGrant,\n      onResponderMove = props.onResponderMove,\n      onResponderReject = props.onResponderReject,\n      onResponderRelease = props.onResponderRelease,\n      onResponderStart = props.onResponderStart,\n      onResponderTerminate = props.onResponderTerminate,\n      onResponderTerminationRequest = props.onResponderTerminationRequest,\n      onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n      onSelectionChange = props.onSelectionChange,\n      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = props.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n      onSubmitEditing = props.onSubmitEditing,\n      placeholderTextColor = props.placeholderTextColor,\n      returnKeyType = props.returnKeyType,\n      _props$secureTextEntr = props.secureTextEntry,\n      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n      selection = props.selection,\n      selectTextOnFocus = props.selectTextOnFocus,\n      spellCheck = props.spellCheck;\n  var type;\n  var inputMode;\n\n  switch (keyboardType) {\n    case 'email-address':\n      type = 'email';\n      break;\n\n    case 'number-pad':\n    case 'numeric':\n      inputMode = 'numeric';\n      break;\n\n    case 'decimal-pad':\n      inputMode = 'decimal';\n      break;\n\n    case 'phone-pad':\n      type = 'tel';\n      break;\n\n    case 'search':\n    case 'web-search':\n      type = 'search';\n      break;\n\n    case 'url':\n      type = 'url';\n      break;\n\n    default:\n      type = 'text';\n  }\n\n  if (secureTextEntry) {\n    type = 'password';\n  }\n\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var handleContentSizeChange = React.useCallback(function (hostNode) {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(function () {\n    return function (hostNode) {\n      if (hostNode != null) {\n        hostNode.clear = function () {\n          if (hostNode != null) {\n            hostNode.value = '';\n          }\n        };\n\n        hostNode.isFocused = function () {\n          return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n        };\n\n        handleContentSizeChange(hostNode);\n      }\n    };\n  }, [handleContentSizeChange]);\n\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  function handleFocus(e) {\n    var hostNode = e.target;\n\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n\n      if (selectTextOnFocus) {\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n\n        focusTimeout = setTimeout(function () {\n          if (hostNode != null) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n\n  function handleKeyDown(e) {\n    var hostNode = e.target;\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (e.key === 'Enter' && !e.shiftKey && !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n\n      if (shouldBlurOnSubmit && hostNode != null) {\n        setTimeout(function () {\n          return hostNode.blur();\n        }, 0);\n      }\n    }\n  }\n\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n            selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n\n  useLayoutEffect(function () {\n    var node = hostRef.current;\n\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder: onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture: onMoveShouldSetResponderCapture,\n    onResponderEnd: onResponderEnd,\n    onResponderGrant: onResponderGrant,\n    onResponderMove: onResponderMove,\n    onResponderReject: onResponderReject,\n    onResponderRelease: onResponderRelease,\n    onResponderStart: onResponderStart,\n    onResponderTerminate: onResponderTerminate,\n    onResponderTerminationRequest: onResponderTerminationRequest,\n    onScrollShouldSetResponder: onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture: onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder: onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture: onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder: onStartShouldSetResponder,\n    onStartShouldSetResponderCapture: onStartShouldSetResponderCapture\n  });\n\n  var _useLocaleContext = useLocaleContext(),\n      contextDirection = _useLocaleContext.direction;\n\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  supportedProps.enterKeyHint = returnKeyType;\n  supportedProps.inputMode = inputMode;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = [{\n    '--placeholderTextColor': placeholderTextColor\n  }, styles.textinput$raw, styles.placeholder, props.style];\n  supportedProps.type = multiline ? undefined : type;\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  var langDirection = props.lang != null ? getLocaleDirection(props.lang) : null;\n  var componentDirection = props.dir || langDirection;\n  var writingDirection = componentDirection || contextDirection;\n  var element = createElement(component, supportedProps, {\n    writingDirection: writingDirection\n  });\n  return element;\n});\nTextInput.displayName = 'TextInput';\nTextInput.State = TextInputState;\nvar styles = StyleSheet.create({\n  textinput$raw: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  },\n  placeholder: {\n    placeholderTextColor: 'var(--placeholderTextColor)'\n  }\n});\nexport default TextInput;","map":{"version":3,"names":["React","createElement","forwardedProps","pick","useElementLayout","useLayoutEffect","useMergeRefs","usePlatformMethods","useResponderEvents","getLocaleDirection","useLocaleContext","StyleSheet","TextInputState","isSelectionStale","node","selection","selectionEnd","selectionStart","start","end","setSelection","setSelectionRange","e","forwardPropsList","Object","assign","defaultProps","accessibilityProps","clickProps","focusProps","keyboardProps","mouseProps","touchProps","styleProps","autoCapitalize","autoComplete","autoCorrect","autoFocus","defaultValue","disabled","lang","maxLength","onChange","onScroll","placeholder","pointerEvents","readOnly","rows","spellCheck","value","type","pickProps","props","isEventComposing","nativeEvent","isComposing","keyCode","focusTimeout","TextInput","forwardRef","forwardedRef","_props$autoCapitalize","autoCompleteType","_props$autoCorrect","blurOnSubmit","clearTextOnFocus","dir","_props$editable","editable","_props$keyboardType","keyboardType","_props$multiline","multiline","_props$numberOfLines","numberOfLines","onBlur","onChangeText","onContentSizeChange","onFocus","onKeyPress","onLayout","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onResponderEnd","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderStart","onResponderTerminate","onResponderTerminationRequest","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChange","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","onSubmitEditing","placeholderTextColor","returnKeyType","_props$secureTextEntr","secureTextEntry","selectTextOnFocus","inputMode","dimensions","useRef","height","width","hostRef","handleContentSizeChange","useCallback","hostNode","newHeight","scrollHeight","newWidth","scrollWidth","current","contentSize","imperativeRef","useMemo","clear","isFocused","currentlyFocusedField","handleBlur","_currentlyFocusedNode","text","target","handleChange","handleFocus","clearTimeout","setTimeout","select","handleKeyDown","stopPropagation","blurOnSubmitDefault","shouldBlurOnSubmit","key","shiftKey","isDefaultPrevented","preventDefault","blur","handleSelectionChange","document","activeElement","component","_useLocaleContext","contextDirection","direction","supportedProps","undefined","enterKeyHint","onKeyDown","onSelect","style","styles","textinput$raw","platformMethodsRef","setRef","ref","langDirection","componentDirection","writingDirection","element","displayName","State","create","MozAppearance","WebkitAppearance","backgroundColor","border","borderRadius","boxSizing","font","margin","padding","resize"],"sources":["C:/Users/ASUS/Desktop/ChuyenDeDiDongV2/node_modules/react-native-web/dist/exports/TextInput/index.js"],"sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher.\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\nimport * as React from 'react';\r\nimport createElement from '../createElement';\r\nimport * as forwardedProps from '../../modules/forwardedProps';\r\nimport pick from '../../modules/pick';\r\nimport useElementLayout from '../../modules/useElementLayout';\r\nimport useLayoutEffect from '../../modules/useLayoutEffect';\r\nimport useMergeRefs from '../../modules/useMergeRefs';\r\nimport usePlatformMethods from '../../modules/usePlatformMethods';\r\nimport useResponderEvents from '../../modules/useResponderEvents';\r\nimport { getLocaleDirection, useLocaleContext } from '../../modules/useLocale';\r\nimport StyleSheet from '../StyleSheet';\r\nimport TextInputState from '../../modules/TextInputState';\r\n/**\r\n * Determines whether a 'selection' prop differs from a node's existing\r\n * selection state.\r\n */\r\n\r\nvar isSelectionStale = (node, selection) => {\r\n  var selectionEnd = node.selectionEnd,\r\n      selectionStart = node.selectionStart;\r\n  var start = selection.start,\r\n      end = selection.end;\r\n  return start !== selectionStart || end !== selectionEnd;\r\n};\r\n/**\r\n * Certain input types do no support 'selectSelectionRange' and will throw an\r\n * error.\r\n */\r\n\r\n\r\nvar setSelection = (node, selection) => {\r\n  if (isSelectionStale(node, selection)) {\r\n    var start = selection.start,\r\n        end = selection.end;\r\n\r\n    try {\r\n      node.setSelectionRange(start, end || start);\r\n    } catch (e) {}\r\n  }\r\n};\r\n\r\nvar forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {\r\n  autoCapitalize: true,\r\n  autoComplete: true,\r\n  autoCorrect: true,\r\n  autoFocus: true,\r\n  defaultValue: true,\r\n  disabled: true,\r\n  lang: true,\r\n  maxLength: true,\r\n  onChange: true,\r\n  onScroll: true,\r\n  placeholder: true,\r\n  pointerEvents: true,\r\n  readOnly: true,\r\n  rows: true,\r\n  spellCheck: true,\r\n  value: true,\r\n  type: true\r\n});\r\n\r\nvar pickProps = props => pick(props, forwardPropsList); // If an Input Method Editor is processing key input, the 'keyCode' is 229.\r\n// https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\r\n\r\n\r\nfunction isEventComposing(nativeEvent) {\r\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\r\n}\r\n\r\nvar focusTimeout = null;\r\nvar TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\r\n  var _props$autoCapitalize = props.autoCapitalize,\r\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\r\n      autoComplete = props.autoComplete,\r\n      autoCompleteType = props.autoCompleteType,\r\n      _props$autoCorrect = props.autoCorrect,\r\n      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\r\n      blurOnSubmit = props.blurOnSubmit,\r\n      clearTextOnFocus = props.clearTextOnFocus,\r\n      dir = props.dir,\r\n      _props$editable = props.editable,\r\n      editable = _props$editable === void 0 ? true : _props$editable,\r\n      _props$keyboardType = props.keyboardType,\r\n      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,\r\n      _props$multiline = props.multiline,\r\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\r\n      _props$numberOfLines = props.numberOfLines,\r\n      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\r\n      onBlur = props.onBlur,\r\n      onChange = props.onChange,\r\n      onChangeText = props.onChangeText,\r\n      onContentSizeChange = props.onContentSizeChange,\r\n      onFocus = props.onFocus,\r\n      onKeyPress = props.onKeyPress,\r\n      onLayout = props.onLayout,\r\n      onMoveShouldSetResponder = props.onMoveShouldSetResponder,\r\n      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\r\n      onResponderEnd = props.onResponderEnd,\r\n      onResponderGrant = props.onResponderGrant,\r\n      onResponderMove = props.onResponderMove,\r\n      onResponderReject = props.onResponderReject,\r\n      onResponderRelease = props.onResponderRelease,\r\n      onResponderStart = props.onResponderStart,\r\n      onResponderTerminate = props.onResponderTerminate,\r\n      onResponderTerminationRequest = props.onResponderTerminationRequest,\r\n      onScrollShouldSetResponder = props.onScrollShouldSetResponder,\r\n      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\r\n      onSelectionChange = props.onSelectionChange,\r\n      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\r\n      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\r\n      onStartShouldSetResponder = props.onStartShouldSetResponder,\r\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\r\n      onSubmitEditing = props.onSubmitEditing,\r\n      placeholderTextColor = props.placeholderTextColor,\r\n      returnKeyType = props.returnKeyType,\r\n      _props$secureTextEntr = props.secureTextEntry,\r\n      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\r\n      selection = props.selection,\r\n      selectTextOnFocus = props.selectTextOnFocus,\r\n      spellCheck = props.spellCheck;\r\n  var type;\r\n  var inputMode;\r\n\r\n  switch (keyboardType) {\r\n    case 'email-address':\r\n      type = 'email';\r\n      break;\r\n\r\n    case 'number-pad':\r\n    case 'numeric':\r\n      inputMode = 'numeric';\r\n      break;\r\n\r\n    case 'decimal-pad':\r\n      inputMode = 'decimal';\r\n      break;\r\n\r\n    case 'phone-pad':\r\n      type = 'tel';\r\n      break;\r\n\r\n    case 'search':\r\n    case 'web-search':\r\n      type = 'search';\r\n      break;\r\n\r\n    case 'url':\r\n      type = 'url';\r\n      break;\r\n\r\n    default:\r\n      type = 'text';\r\n  }\r\n\r\n  if (secureTextEntry) {\r\n    type = 'password';\r\n  }\r\n\r\n  var dimensions = React.useRef({\r\n    height: null,\r\n    width: null\r\n  });\r\n  var hostRef = React.useRef(null);\r\n  var handleContentSizeChange = React.useCallback(hostNode => {\r\n    if (multiline && onContentSizeChange && hostNode != null) {\r\n      var newHeight = hostNode.scrollHeight;\r\n      var newWidth = hostNode.scrollWidth;\r\n\r\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\r\n        dimensions.current.height = newHeight;\r\n        dimensions.current.width = newWidth;\r\n        onContentSizeChange({\r\n          nativeEvent: {\r\n            contentSize: {\r\n              height: dimensions.current.height,\r\n              width: dimensions.current.width\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }, [multiline, onContentSizeChange]);\r\n  var imperativeRef = React.useMemo(() => hostNode => {\r\n    // TextInput needs to add more methods to the hostNode in addition to those\r\n    // added by `usePlatformMethods`. This is temporarily until an API like\r\n    // `TextInput.clear(hostRef)` is added to React Native.\r\n    if (hostNode != null) {\r\n      hostNode.clear = function () {\r\n        if (hostNode != null) {\r\n          hostNode.value = '';\r\n        }\r\n      };\r\n\r\n      hostNode.isFocused = function () {\r\n        return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\r\n      };\r\n\r\n      handleContentSizeChange(hostNode);\r\n    }\r\n  }, [handleContentSizeChange]);\r\n\r\n  function handleBlur(e) {\r\n    TextInputState._currentlyFocusedNode = null;\r\n\r\n    if (onBlur) {\r\n      e.nativeEvent.text = e.target.value;\r\n      onBlur(e);\r\n    }\r\n  }\r\n\r\n  function handleChange(e) {\r\n    var hostNode = e.target;\r\n    var text = hostNode.value;\r\n    e.nativeEvent.text = text;\r\n    handleContentSizeChange(hostNode);\r\n\r\n    if (onChange) {\r\n      onChange(e);\r\n    }\r\n\r\n    if (onChangeText) {\r\n      onChangeText(text);\r\n    }\r\n  }\r\n\r\n  function handleFocus(e) {\r\n    var hostNode = e.target;\r\n\r\n    if (onFocus) {\r\n      e.nativeEvent.text = hostNode.value;\r\n      onFocus(e);\r\n    }\r\n\r\n    if (hostNode != null) {\r\n      TextInputState._currentlyFocusedNode = hostNode;\r\n\r\n      if (clearTextOnFocus) {\r\n        hostNode.value = '';\r\n      }\r\n\r\n      if (selectTextOnFocus) {\r\n        // Safari requires selection to occur in a setTimeout\r\n        if (focusTimeout != null) {\r\n          clearTimeout(focusTimeout);\r\n        }\r\n\r\n        focusTimeout = setTimeout(() => {\r\n          if (hostNode != null) {\r\n            hostNode.select();\r\n          }\r\n        }, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleKeyDown(e) {\r\n    var hostNode = e.target; // Prevent key events bubbling (see #612)\r\n\r\n    e.stopPropagation();\r\n    var blurOnSubmitDefault = !multiline;\r\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\r\n    var nativeEvent = e.nativeEvent;\r\n    var isComposing = isEventComposing(nativeEvent);\r\n\r\n    if (onKeyPress) {\r\n      onKeyPress(e);\r\n    }\r\n\r\n    if (e.key === 'Enter' && !e.shiftKey && // Do not call submit if composition is occuring.\r\n    !isComposing && !e.isDefaultPrevented()) {\r\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\r\n        // prevent \"Enter\" from inserting a newline or submitting a form\r\n        e.preventDefault();\r\n        nativeEvent.text = e.target.value;\r\n        onSubmitEditing(e);\r\n      }\r\n\r\n      if (shouldBlurOnSubmit && hostNode != null) {\r\n        setTimeout(() => hostNode.blur(), 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleSelectionChange(e) {\r\n    if (onSelectionChange) {\r\n      try {\r\n        var node = e.target;\r\n        var selectionStart = node.selectionStart,\r\n            selectionEnd = node.selectionEnd;\r\n        e.nativeEvent.selection = {\r\n          start: selectionStart,\r\n          end: selectionEnd\r\n        };\r\n        e.nativeEvent.text = e.target.value;\r\n        onSelectionChange(e);\r\n      } catch (e) {}\r\n    }\r\n  }\r\n\r\n  useLayoutEffect(() => {\r\n    var node = hostRef.current;\r\n\r\n    if (node != null && selection != null) {\r\n      setSelection(node, selection);\r\n    }\r\n\r\n    if (document.activeElement === node) {\r\n      TextInputState._currentlyFocusedNode = node;\r\n    }\r\n  }, [hostRef, selection]);\r\n  var component = multiline ? 'textarea' : 'input';\r\n  useElementLayout(hostRef, onLayout);\r\n  useResponderEvents(hostRef, {\r\n    onMoveShouldSetResponder,\r\n    onMoveShouldSetResponderCapture,\r\n    onResponderEnd,\r\n    onResponderGrant,\r\n    onResponderMove,\r\n    onResponderReject,\r\n    onResponderRelease,\r\n    onResponderStart,\r\n    onResponderTerminate,\r\n    onResponderTerminationRequest,\r\n    onScrollShouldSetResponder,\r\n    onScrollShouldSetResponderCapture,\r\n    onSelectionChangeShouldSetResponder,\r\n    onSelectionChangeShouldSetResponderCapture,\r\n    onStartShouldSetResponder,\r\n    onStartShouldSetResponderCapture\r\n  });\r\n\r\n  var _useLocaleContext = useLocaleContext(),\r\n      contextDirection = _useLocaleContext.direction;\r\n\r\n  var supportedProps = pickProps(props);\r\n  supportedProps.autoCapitalize = autoCapitalize;\r\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\r\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off'; // 'auto' by default allows browsers to infer writing direction\r\n\r\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\r\n  supportedProps.enterKeyHint = returnKeyType;\r\n  supportedProps.inputMode = inputMode;\r\n  supportedProps.onBlur = handleBlur;\r\n  supportedProps.onChange = handleChange;\r\n  supportedProps.onFocus = handleFocus;\r\n  supportedProps.onKeyDown = handleKeyDown;\r\n  supportedProps.onSelect = handleSelectionChange;\r\n  supportedProps.readOnly = !editable;\r\n  supportedProps.rows = multiline ? numberOfLines : undefined;\r\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\r\n  supportedProps.style = [{\r\n    '--placeholderTextColor': placeholderTextColor\r\n  }, styles.textinput$raw, styles.placeholder, props.style];\r\n  supportedProps.type = multiline ? undefined : type;\r\n  var platformMethodsRef = usePlatformMethods(supportedProps);\r\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\r\n  supportedProps.ref = setRef;\r\n  var langDirection = props.lang != null ? getLocaleDirection(props.lang) : null;\r\n  var componentDirection = props.dir || langDirection;\r\n  var writingDirection = componentDirection || contextDirection;\r\n  var element = createElement(component, supportedProps, {\r\n    writingDirection\r\n  });\r\n  return element;\r\n});\r\nTextInput.displayName = 'TextInput'; // $FlowFixMe\r\n\r\nTextInput.State = TextInputState;\r\nvar styles = StyleSheet.create({\r\n  textinput$raw: {\r\n    MozAppearance: 'textfield',\r\n    WebkitAppearance: 'none',\r\n    backgroundColor: 'transparent',\r\n    border: '0 solid black',\r\n    borderRadius: 0,\r\n    boxSizing: 'border-box',\r\n    font: '14px System',\r\n    margin: 0,\r\n    padding: 0,\r\n    resize: 'none'\r\n  },\r\n  placeholder: {\r\n    placeholderTextColor: 'var(--placeholderTextColor)'\r\n  }\r\n});\r\nexport default TextInput;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
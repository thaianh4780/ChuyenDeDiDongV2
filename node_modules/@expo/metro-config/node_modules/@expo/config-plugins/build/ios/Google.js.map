<<<<<<< HEAD
{"version":3,"file":"Google.js","names":["withGoogle","config","withInfoPlist","modResults","setGoogleConfig","modRequest","withGoogleServicesFile","withXcodeProject","setGoogleServicesFile","projectRoot","project","readGoogleServicesInfoPlist","relativePath","googleServiceFilePath","path","resolve","contents","fs","readFileSync","assert","plist","parse","getGoogleSignInReservedClientId","reservedClientId","ios","googleSignIn","googleServicesFileRelativePath","getGoogleServicesFile","infoPlist","REVERSED_CLIENT_ID","googleServicesFile","setGoogleSignInReservedClientId","appendScheme","copyFileSync","join","getSourceRoot","projectName","getProjectName","plistFilePath","hasFile","addResourceFileToGroup","filepath","groupName","isBuildFile","verbose"],"sources":["../../src/ios/Google.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport plist from '@expo/plist';\nimport assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin, ModProps } from '../Plugin.types';\nimport { withInfoPlist, withXcodeProject } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\nimport { getSourceRoot } from './Paths';\nimport { appendScheme } from './Scheme';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nexport const withGoogle: ConfigPlugin = (config) => {\n  return withInfoPlist(config, (config) => {\n    config.modResults = setGoogleConfig(config, config.modResults, config.modRequest);\n    return config;\n  });\n};\n\nexport const withGoogleServicesFile: ConfigPlugin = (config) => {\n  return withXcodeProject(config, (config) => {\n    config.modResults = setGoogleServicesFile(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nfunction readGoogleServicesInfoPlist(\n  relativePath: string,\n  { projectRoot }: { projectRoot: string }\n) {\n  const googleServiceFilePath = path.resolve(projectRoot, relativePath);\n  const contents = fs.readFileSync(googleServiceFilePath, 'utf8');\n  assert(contents, 'GoogleService-Info.plist is empty');\n  return plist.parse(contents);\n}\n\nexport function getGoogleSignInReservedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  modRequest: Pick<ModProps<InfoPlist>, 'projectRoot'>\n): string | null {\n  const reservedClientId = config.ios?.config?.googleSignIn?.reservedClientId ?? null;\n  if (reservedClientId) {\n    return reservedClientId;\n  }\n\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return null;\n  }\n\n  const infoPlist = readGoogleServicesInfoPlist(googleServicesFileRelativePath, modRequest);\n\n  return infoPlist.REVERSED_CLIENT_ID ?? null;\n}\n\nexport function getGoogleServicesFile(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.googleServicesFile ?? null;\n}\n\nexport function setGoogleSignInReservedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist,\n  modRequest: Pick<ModProps<InfoPlist>, 'projectRoot'>\n): InfoPlist {\n  const reservedClientId = getGoogleSignInReservedClientId(config, modRequest);\n\n  if (reservedClientId === null) {\n    return infoPlist;\n  }\n\n  return appendScheme(reservedClientId, infoPlist);\n}\n\nexport function setGoogleConfig(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist,\n  modRequest: ModProps<InfoPlist>\n): InfoPlist {\n  infoPlist = setGoogleSignInReservedClientId(config, infoPlist, modRequest);\n  return infoPlist;\n}\n\nexport function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'ios'>,\n  { projectRoot, project }: { project: XcodeProject; projectRoot: string }\n): XcodeProject {\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return project;\n  }\n\n  const googleServiceFilePath = path.resolve(projectRoot, googleServicesFileRelativePath);\n  fs.copyFileSync(\n    googleServiceFilePath,\n    path.join(getSourceRoot(projectRoot), 'GoogleService-Info.plist')\n  );\n\n  const projectName = getProjectName(projectRoot);\n  const plistFilePath = `${projectName}/GoogleService-Info.plist`;\n  if (!project.hasFile(plistFilePath)) {\n    project = addResourceFileToGroup({\n      filepath: plistFilePath,\n      groupName: projectName,\n      project,\n      isBuildFile: true,\n      verbose: true,\n    });\n  }\n  return project;\n}\n"],"mappings":"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"}
=======
{"version":3,"sources":["../../src/ios/Google.ts"],"names":["withGoogle","config","modResults","setGoogleConfig","modRequest","withGoogleServicesFile","setGoogleServicesFile","projectRoot","project","readGoogleServicesInfoPlist","relativePath","googleServiceFilePath","path","resolve","contents","fs","readFileSync","plist","parse","getGoogleSignInReservedClientId","reservedClientId","ios","googleSignIn","googleServicesFileRelativePath","getGoogleServicesFile","infoPlist","REVERSED_CLIENT_ID","googleServicesFile","setGoogleSignInReservedClientId","copyFileSync","join","projectName","plistFilePath","hasFile","filepath","groupName","isBuildFile","verbose"],"mappings":";;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,MAAMA,UAAwB,GAAGC,MAAM,IAAI;AAChD,SAAO,iCAAcA,MAAd,EAAsBA,MAAM,IAAI;AACrCA,IAAAA,MAAM,CAACC,UAAP,GAAoBC,eAAe,CAACF,MAAD,EAASA,MAAM,CAACC,UAAhB,EAA4BD,MAAM,CAACG,UAAnC,CAAnC;AACA,WAAOH,MAAP;AACD,GAHM,CAAP;AAID,CALM;;;;AAOA,MAAMI,sBAAoC,GAAGJ,MAAM,IAAI;AAC5D,SAAO,oCAAiBA,MAAjB,EAAyBA,MAAM,IAAI;AACxCA,IAAAA,MAAM,CAACC,UAAP,GAAoBI,qBAAqB,CAACL,MAAD,EAAS;AAChDM,MAAAA,WAAW,EAAEN,MAAM,CAACG,UAAP,CAAkBG,WADiB;AAEhDC,MAAAA,OAAO,EAAEP,MAAM,CAACC;AAFgC,KAAT,CAAzC;AAIA,WAAOD,MAAP;AACD,GANM,CAAP;AAOD,CARM;;;;AAUP,SAASQ,2BAAT,CACEC,YADF,EAEE;AAAEH,EAAAA;AAAF,CAFF,EAGE;AACA,QAAMI,qBAAqB,GAAGC,gBAAKC,OAAL,CAAaN,WAAb,EAA0BG,YAA1B,CAA9B;;AACA,QAAMI,QAAQ,GAAGC,cAAGC,YAAH,CAAgBL,qBAAhB,EAAuC,MAAvC,CAAjB;;AACA,yBAAOG,QAAP,EAAiB,mCAAjB;AACA,SAAOG,iBAAMC,KAAN,CAAYJ,QAAZ,CAAP;AACD;;AAEM,SAASK,+BAAT,CACLlB,MADK,EAELG,UAFK,EAGU;AAAA;;AACf,QAAMgB,gBAAgB,2CAAGnB,MAAM,CAACoB,GAAV,sEAAG,YAAYpB,MAAf,iFAAG,mBAAoBqB,YAAvB,2DAAG,uBAAkCF,gBAArC,yEAAyD,IAA/E;;AACA,MAAIA,gBAAJ,EAAsB;AACpB,WAAOA,gBAAP;AACD;;AAED,QAAMG,8BAA8B,GAAGC,qBAAqB,CAACvB,MAAD,CAA5D;;AACA,MAAIsB,8BAA8B,KAAK,IAAvC,EAA6C;AAC3C,WAAO,IAAP;AACD;;AAED,QAAME,SAAS,GAAGhB,2BAA2B,CAACc,8BAAD,EAAiCnB,UAAjC,CAA7C;AAEA,kCAAOqB,SAAS,CAACC,kBAAjB,yEAAuC,IAAvC;AACD;;AAEM,SAASF,qBAAT,CAA+BvB,MAA/B,EAAgE;AAAA;;AACrE,kDAAOA,MAAM,CAACoB,GAAd,iDAAO,aAAYM,kBAAnB,yEAAyC,IAAzC;AACD;;AAEM,SAASC,+BAAT,CACL3B,MADK,EAELwB,SAFK,EAGLrB,UAHK,EAIM;AACX,QAAMgB,gBAAgB,GAAGD,+BAA+B,CAAClB,MAAD,EAASG,UAAT,CAAxD;;AAEA,MAAIgB,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,WAAOK,SAAP;AACD;;AAED,SAAO,4BAAaL,gBAAb,EAA+BK,SAA/B,CAAP;AACD;;AAEM,SAAStB,eAAT,CACLF,MADK,EAELwB,SAFK,EAGLrB,UAHK,EAIM;AACXqB,EAAAA,SAAS,GAAGG,+BAA+B,CAAC3B,MAAD,EAASwB,SAAT,EAAoBrB,UAApB,CAA3C;AACA,SAAOqB,SAAP;AACD;;AAEM,SAASnB,qBAAT,CACLL,MADK,EAEL;AAAEM,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAFK,EAGS;AACd,QAAMe,8BAA8B,GAAGC,qBAAqB,CAACvB,MAAD,CAA5D;;AACA,MAAIsB,8BAA8B,KAAK,IAAvC,EAA6C;AAC3C,WAAOf,OAAP;AACD;;AAED,QAAMG,qBAAqB,GAAGC,gBAAKC,OAAL,CAAaN,WAAb,EAA0BgB,8BAA1B,CAA9B;;AACAR,gBAAGc,YAAH,CACElB,qBADF,EAEEC,gBAAKkB,IAAL,CAAU,4BAAcvB,WAAd,CAAV,EAAsC,0BAAtC,CAFF;;AAKA,QAAMwB,WAAW,GAAG,iCAAexB,WAAf,CAApB;AACA,QAAMyB,aAAa,GAAI,GAAED,WAAY,2BAArC;;AACA,MAAI,CAACvB,OAAO,CAACyB,OAAR,CAAgBD,aAAhB,CAAL,EAAqC;AACnCxB,IAAAA,OAAO,GAAG,yCAAuB;AAC/B0B,MAAAA,QAAQ,EAAEF,aADqB;AAE/BG,MAAAA,SAAS,EAAEJ,WAFoB;AAG/BvB,MAAAA,OAH+B;AAI/B4B,MAAAA,WAAW,EAAE,IAJkB;AAK/BC,MAAAA,OAAO,EAAE;AALsB,KAAvB,CAAV;AAOD;;AACD,SAAO7B,OAAP;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport plist from '@expo/plist';\nimport assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin, ModProps } from '../Plugin.types';\nimport { withInfoPlist, withXcodeProject } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\nimport { getSourceRoot } from './Paths';\nimport { appendScheme } from './Scheme';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nexport const withGoogle: ConfigPlugin = config => {\n  return withInfoPlist(config, config => {\n    config.modResults = setGoogleConfig(config, config.modResults, config.modRequest);\n    return config;\n  });\n};\n\nexport const withGoogleServicesFile: ConfigPlugin = config => {\n  return withXcodeProject(config, config => {\n    config.modResults = setGoogleServicesFile(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nfunction readGoogleServicesInfoPlist(\n  relativePath: string,\n  { projectRoot }: { projectRoot: string }\n) {\n  const googleServiceFilePath = path.resolve(projectRoot, relativePath);\n  const contents = fs.readFileSync(googleServiceFilePath, 'utf8');\n  assert(contents, 'GoogleService-Info.plist is empty');\n  return plist.parse(contents);\n}\n\nexport function getGoogleSignInReservedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  modRequest: Pick<ModProps<InfoPlist>, 'projectRoot'>\n): string | null {\n  const reservedClientId = config.ios?.config?.googleSignIn?.reservedClientId ?? null;\n  if (reservedClientId) {\n    return reservedClientId;\n  }\n\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return null;\n  }\n\n  const infoPlist = readGoogleServicesInfoPlist(googleServicesFileRelativePath, modRequest);\n\n  return infoPlist.REVERSED_CLIENT_ID ?? null;\n}\n\nexport function getGoogleServicesFile(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.googleServicesFile ?? null;\n}\n\nexport function setGoogleSignInReservedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist,\n  modRequest: Pick<ModProps<InfoPlist>, 'projectRoot'>\n): InfoPlist {\n  const reservedClientId = getGoogleSignInReservedClientId(config, modRequest);\n\n  if (reservedClientId === null) {\n    return infoPlist;\n  }\n\n  return appendScheme(reservedClientId, infoPlist);\n}\n\nexport function setGoogleConfig(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist,\n  modRequest: ModProps<InfoPlist>\n): InfoPlist {\n  infoPlist = setGoogleSignInReservedClientId(config, infoPlist, modRequest);\n  return infoPlist;\n}\n\nexport function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'ios'>,\n  { projectRoot, project }: { project: XcodeProject; projectRoot: string }\n): XcodeProject {\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return project;\n  }\n\n  const googleServiceFilePath = path.resolve(projectRoot, googleServicesFileRelativePath);\n  fs.copyFileSync(\n    googleServiceFilePath,\n    path.join(getSourceRoot(projectRoot), 'GoogleService-Info.plist')\n  );\n\n  const projectName = getProjectName(projectRoot);\n  const plistFilePath = `${projectName}/GoogleService-Info.plist`;\n  if (!project.hasFile(plistFilePath)) {\n    project = addResourceFileToGroup({\n      filepath: plistFilePath,\n      groupName: projectName,\n      project,\n      isBuildFile: true,\n      verbose: true,\n    });\n  }\n  return project;\n}\n"],"file":"Google.js"}
>>>>>>> origin/main
